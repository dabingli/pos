<?php
namespace app\modules\v1\controllers;

use common\models\MerchantUser;
use common\models\product\Product;
use common\models\Transaction;
use common\models\TransactionTotal;
use common\models\user\nestedSets\UserLink;
use common\models\user\User;
use yii;
use yii\filters\auth\HttpBearerAuth;

class MerchantController extends BaseActiveController
{
    public $modelClass = 'common\models\user\User';

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authenticator'] = [
            'class' => HttpBearerAuth::className(),
        ];

        return $behaviors;
    }

    /**
     * @return array商户查询列表
     */
    public function actionList()
    {
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        $value = $this->request->post('value');
        $type = $this->request->post('type');

        if ($page <= 1) {
            $page = 1;
        }

        $userLink = UserLink::findOne([
            'user_id' => Yii::$app->user->id
        ]);
        $ids_array = [Yii::$app->user->id => Yii::$app->user->id];
        $childrenModel = $userLink->children();
        $childrenModel->andWhere([
            'agent_id' => Yii::$app->user->identity->agent_id
        ]);
        $childrenModel->select([
            'user_id'
        ]);

        $children_ids = $childrenModel->indexBy('user_id')->column();
        $ids_array = array_merge($ids_array,$children_ids);

        $merchantUser = MerchantUser::find();
        $merchantUser->alias('u');
        $merchantUser->select(['u.id','u.user_id','u.merchantId','u.merchantName','total_money'=>'sum(txAmt)','count'=>'count(*)','u.serialNo']);

        $merchantUser->andWhere(['in','u.user_id',$ids_array]);
        $merchantUser->andFilterWhere(['or',['like','u.merchantName',$value],['like', 'u.serialNo',$value]]);

        if($type == 1 )
        {
            $merchantUser->having([
                '>=',
                'total_money',
                50000
            ]);
        }

        if($type == 2)
    {
        $merchantUser->having([
            'and',
            [
                '>=',
                'count',
                2
            ],
            [
                '>=',
                'total_money',
                10
            ]
        ]);
    }
    if($type == 3)
    {
        $merchantUser->joinWith(['product'=>function($q){
            $q->andWhere([
                'return_rewards_status' => Product::REWARDS
            ]);
        }]);
    }

    if($type == 4)
    {
        $merchantUser->having([
           '<=',
           'count',
           0
        ]);
    }


        $merchantUser->joinWith(['transaction'=>function($q)use($type){
            $q->select(['merchantId'])->groupBy('merchantId');
            if($type == 2)
            {
                $end = date('Y-m-d H:i:s',time());
                $start = date('Y-m-d H:i:s',strtotime("-30 days"));

                $q->andWhere([
                    'between',
                    'txTime',
                    $start,
                    $end
                ]);
            }

            if($type == 4)
            {
                $end = date('Y-m-d H:i:s',time());
                $start = date('Y-m-d H:i:s',strtotime("-50 days"));

                $q->andWhere([
                    'between',
                    'txTime',
                    $start,
                    $end
                ]);
            }

        }])->orderBy(['total_money'=>SORT_DESC]);

        $offset = ($page - 1) * $limit;
        $merchantUser->offset($offset)->limit($limit);

        $data = $merchantUser->asArray()->all();
        foreach($data as  &$val)
        {
            $val['total_money'] = !empty($val['total_money']) ? $val['total_money'] : 0;
        }

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => $data
            ];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /*
     * 详情
     */
    public function actionDetail()
    {
        $id = $this->request->post('id');
        $model = MerchantUser::find();
        $model->select(['id','merchantId','merchantName','phone','serialNo','bindingTime','user_id']);
        $model->andWhere(['id'=>$id]);
        $model->with(['product'=>function($q){
            $q->select(['id','type_id']);
            $q->with(['agentProductType'=>function($query){
                $query->select(['id','product_type_id']);
                $query->with(['productType'=>function($q){
                    $q->select(['id','name']);
                }]);
            }]);
        }]);
        $data = $model->asArray()->one();
        $data['phone'] = str_replace(substr($data['phone'],3,4),'****',$data['phone']);
        $data['type'] = $data['product']['agentProductType']['productType']['name'] ?: '';
        unset($data['product']);
        $data['bindingTime'] = !empty($data['bindingTime']) ? date('Y-m-d H:i:s',$data['bindingTime']) : '';
        $total_money = Transaction::find()->andWhere(['merchantId'=>$data['merchantId']])->sum('txAmt');
        $data['total_money'] = !empty($total_money) ? $total_money : 0 ;
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /**
     * 商户统计
     */
    public function actionStatistics()
    {
        $month_start = strtotime(date("Y-m-01 00:00:00"));
        $month_end = strtotime(date("Y-m-t 23:59:59"));
        $today_start = strtotime(date('Y-m-d 00:00:00'));
        $today_end = strtotime(date('Y-m-d 23:59:59'));
//        $yesterday_start = strtotime(date("Y-m-d",strtotime("-1 day")).' 00:00:00');
//        $yesterday_end = strtotime(date("Y-m-d",strtotime("-1 day")).' 23:59:59');

        $userLink = UserLink::findOne([
            'user_id' => Yii::$app->user->id
        ]);
        $ids_array = [Yii::$app->user->id => Yii::$app->user->id];
        $childrenModel = $userLink->children();
        $childrenModel->andWhere([
            'agent_id' => Yii::$app->user->identity->agent_id
        ]);
        $childrenModel->select([
            'user_id'
        ]);
        $children_ids = $childrenModel->indexBy('user_id')->column();
        $ids_array = array_merge($ids_array,$children_ids);

//        商户总数
        $data['all'] = MerchantUser::find()->andWhere(['in','user_id',$ids_array])->count();
//      今日新增
        $data['today'] = MerchantUser::find()->andWhere(['in','user_id',$ids_array])
            ->andWhere(['between','bindingTime',$today_start,$today_end])->count();
//        本月新增
        $data['month'] = MerchantUser::find()->andWhere(['in','user_id',$ids_array])
            ->andWhere(['between','bindingTime',$month_start,$month_end])->count();
//        $data['yesterday'] = MerchantUser::find()->andWhere(['in','user_id',$ids_array])
//            ->andWhere(['between','bindingTime',$yesterday_start,$yesterday_end])->count();

//        直营商户
        $data['direct']['total'] = MerchantUser::find()->andWhere(['user_id' => Yii::$app->user->id])->count();
//        间推商户
        $data['indirect']['total'] = $data['all'] - $data['direct']['total'];

//        直营累计
        $transaction = Transaction::find()->andWhere(['user_id'=>Yii::$app->user->id]);
        $data['direct']['all']['count'] = $transaction->count();
        $data['direct']['all']['txAmt'] = $transaction->sum('txAmt');
        $data['direct']['all']['txAmt'] = $data['direct']['all']['txAmt'] ? round($data['direct']['all']['txAmt']/10000,2) : 0;

//        直营今日交易统计
        $transaction = Transaction::find()->andWhere(['user_id'=>Yii::$app->user->id]);
        $data['direct']['today']['count'] = $transaction->andWhere(['between','created_at',$today_start,$today_end])->count();
        $data['direct']['today']['txAmt'] = $transaction->sum('txAmt');
        $data['direct']['today']['txAmt'] = $data['direct']['today']['txAmt'] ? round($data['direct']['today']['txAmt']/10000,2) : 0;

//        本月直营
        $transaction = Transaction::find()->andWhere(['user_id'=>Yii::$app->user->id]);
        $data['direct']['month']['count'] = $transaction->andWhere(['between','created_at',$month_start,$month_end])->count();
        $data['direct']['month']['txAmt'] = $transaction->sum('txAmt');
        $data['direct']['month']['txAmt'] = $data['direct']['month']['txAmt'] ? round($data['direct']['month']['txAmt']/10000,2) : 0;

//        间推商户累计
        $transaction = Transaction::find()->andWhere(['user_id'=>$children_ids]);
        $data['indirect']['all']['count'] = $transaction->count();
        $data['indirect']['all']['txAmt'] = $transaction->sum('txAmt');
        $data['indirect']['all']['txAmt'] = $data['indirect']['all']['txAmt'] ? round($data['indirect']['all']['txAmt']/10000,2) : 0;

//        间推商户今日交易统计
        $transaction = Transaction::find()->andWhere(['user_id'=>$children_ids]);
        $data['indirect']['today']['count'] = $transaction->andWhere(['between','created_at',$today_start,$today_end])->count();
        $data['indirect']['today']['txAmt'] = $transaction->sum('txAmt');
        $data['indirect']['today']['txAmt'] = $data['indirect']['today']['txAmt'] ? round($data['indirect']['today']['txAmt']/10000,2) : 0;


//        本月间推商户
        $transaction = Transaction::find()->andWhere(['user_id'=>$children_ids]);
        $data['indirect']['month']['count'] = $transaction->andWhere(['between','created_at',$month_start,$month_end])->count();
        $data['indirect']['month']['txAmt'] = $transaction->sum('txAmt');
        $data['indirect']['month']['txAmt'] = $data['indirect']['month']['txAmt'] ? round($data['indirect']['month']['txAmt']/10000,2) : 0;


        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /**
     * 商户统计列表
     */
    public function actionStatisticsList()
    {
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        $type = $this->request->post('type');
        $createdAtStart = '';
        $createdAtEnd = '';
        if ($page <= 1) {
            $page = 1;
        }

        $userLink = UserLink::findOne([
            'user_id' => Yii::$app->user->id
        ]);
        $ids_array = [Yii::$app->user->id => Yii::$app->user->id];
        $childrenModel = $userLink->children();
        $childrenModel->andWhere([
            'agent_id' => Yii::$app->user->identity->agent_id
        ]);
        $childrenModel->select([
            'user_id'
        ]);

        $children_ids = $childrenModel->indexBy('user_id')->column();
        $ids_array = array_merge($ids_array,$children_ids);

        $merchantUser = MerchantUser::find();
        $merchantUser->select(['id','user_id','merchantName','serialNo']);
        $merchantUser->andWhere(['in','user_id',$ids_array]);

//        今日
        if($type == 1)
        {
            $createdAtStart = strtotime(date('Y-m-d 00:00:00'));
            $createdAtEnd = strtotime(date('Y-m-d 23:59:59'));
        }
//        本月
        if($type == 2)
        {
            $createdAtStart = strtotime(date("Y-m-00 00:00:00"));
            $createdAtEnd = strtotime(date("Y-m-t 23:59:59"));

//            $createdAtStart = strtotime(date("Y-m-d",strtotime("-1 day")).' 00:00:00');
//            $createdAtEnd = strtotime(date("Y-m-d",strtotime("-1 day")).' 23:59:59');
        }
//        直营
        if($type == 3)
        {
            $merchantUser = MerchantUser::find();
            $merchantUser->select(['id','user_id','merchantName','serialNo']);
            $merchantUser->andWhere(['user_id'=>Yii::$app->user->id]);
        }
//       间推商户
        if($type == 4)
        {
            $merchantUser = MerchantUser::find();
            $merchantUser->select(['id','user_id','merchantName','serialNo']);
            $merchantUser->andWhere(['in','user_id',$children_ids]);
        }

        $merchantUser->andFilterWhere([
            'between',
            'bindingTime',
            $createdAtStart,
            $createdAtEnd
        ]);

        $offset = ($page - 1) * $limit;
        $merchantUser->offset($offset)->limit($limit);
        $data = $merchantUser->asArray()->all();

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => $data
            ];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }
}