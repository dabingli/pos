<?php
namespace app\modules\v1\controllers;

use yii;
use yii\filters\auth\HttpBearerAuth;
use common\models\AgentProductType;
use common\models\MerchantUser;
use common\models\product\Product;
use common\models\product\ProductType;
use common\models\TransactionTotal;
use common\models\user\User;
use common\models\user\UserSettlement;
use common\services\app\SignupForm;
use common\services\app\LoginForm;
use common\services\app\SetUpPayPasswordForm;
use common\services\app\SetUpPasswordForm;
use common\models\user\BankCard;
use common\models\user\UserBankCard;
use common\services\app\AddCardForm;
use common\models\app\AppFeedBack;
use common\services\app\EditInfoForm;
use common\services\app\ForgetPwdForm;
use common\models\Profit;
use common\models\Order;
use common\models\user\nestedSets\UserLink;

class UserController extends BaseActiveController
{

    public $modelClass = 'common\models\user\User';

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authenticator'] = [
            'class' => HttpBearerAuth::className(),
            'optional' => [
                'login',
                'signup',
                'signup-code',
                'set-up-password-code',
                'set-up-forget_pwd-code',
                'forget-pwd'
            ]
        ];

        return $behaviors;
    }

    public function actions()
    {
        return [
            'signup-code' => [
                'class' => 'app\components\captcha\code\SMSCodeAction',
                'length' => 4,
                'fixedVerifyCode' => YII_ENV_DEV ? '1234' : null,
                'codeId' => 1,
                'content' => Yii::$app->params['sms']['sign'] . '您的注册验证码为',
                'mobile'=>$this->request->post('mobile')
            ],
            'set-up-password-code' => [
                'class' => 'app\components\captcha\code\SMSCodeAction',
                'length' => 4,
                'fixedVerifyCode' => YII_ENV_DEV ? '1234' : null,
                'codeId' => 2,
                'content' => Yii::$app->params['sms']['sign'] . '您设置登录密码的验证码为',
            ],
            'set-up-pay-password-code' => [
                'class' => 'app\components\captcha\code\SMSCodeAction',
                'length' => 4,
                'fixedVerifyCode' => YII_ENV_DEV ? '1234' : null,
                'codeId' => 3,
                'content' => Yii::$app->params['sms']['sign'] . '您设置支付密码的验证码为',
            ],
            'bind-code' => [
                'class' => 'app\components\captcha\code\SMSCodeAction',
                'length' => 6,
                'fixedVerifyCode' => YII_ENV_DEV ? '1234' : null,
                'codeId' => 4,
                'content' => Yii::$app->params['sms']['sign'] . '您的绑定银行卡验证码为',
                'mobile' => $this->request->post('mobile')
            ],
            'set-up-forget_pwd-code' => [
                'class' => 'app\components\captcha\code\SMSCodeAction',
                'length' => 6,
                'fixedVerifyCode' => YII_ENV_DEV ? '1234' : null,
                'codeId' => 5,
                'content' => Yii::$app->params['sms']['sign'] . '您重置密码的验证码为',
                'mobile'=>$this->request->post('mobile')
            ],
            'bank-card-name' => [
                'class' => 'app\modules\v1\actions\real\BankCardNameAction',
                'cardNo' => $this->request->post('cardNo')
            ],
        ];
    }

    /**
     * 登录
     *
     * @return number[]|string[][]|NULL[][]|number[]|array[]
     */
    public function actionLogin()
    {
        if (! Yii::$app->user->isGuest) {
            return [
                'status' => 0,
                'code' => 0,
                'message' => [
                    'user' => '已登录请勿重新登录'
                ]
            ];
        }
        $model = new LoginForm();
        $model->setAttributes($this->request->post());
        if ($model->login()) {
            $userModel = Yii::$app->user->identity;
            $data = $userModel->toArray();
            unset($data['auth_key'], $data['pay_password'], $data['password_hash'], $data['password_reset_token']);
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '登陆成功'
                ],
                'data' => $data
            ];
        }
        return [
            'status' => 0,
            'code' => 0,
            'message' => $model->getFirstErrors()
        ];
    }

    /**
     * 退出登录
     *
     * @return \yii\web\Response
     */
    public function actionLogout()
    {
        $userId = Yii::$app->user->id;
        if(Yii::$app->user->logout()){
            $user = User::findOne([
                'id' => $userId
            ]);

            if(!empty($user)){
                $user->load([
                    'client_id' => ''
                ],'');
                $user->save();
            }
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                '退出成功'
            ],
            'data' => []
        ];
    }

    /**
     * 注册
     *
     * @return \yii\web\Response|string
     */
    public function actionSignup()
    {
        $model = new SignupForm();
        $post = $this->request->post();
        $db = Yii::$app->db;
        $transaction = $db->beginTransaction();
        if ($model->load($post, '')) {
            $user = $model->signup();
            if ($user) {
                $transaction->commit();
                return [
                    'status' => 0,
                    'code' => 200,
                    'message' => [
                        '注册成功'
                    ],
                    'data' => $user
                ];
            }
        }
        $transaction->rollBack();
        return [
            'status' => 0,
            'code' => 0,
            'message' => $model->getFirstErrors(),
            'data' => null
        ];
    }

    /**
     * 用户信息
     *
     * @return unknown
     */
    public function actionInfo()
    {
        $userModel = Yii::$app->user->identity;
        $parent = isset($userModel->parent->mobile) ? $userModel->parent->mobile : '';
        $data = $userModel->toArray();
        $data['profit_money'] = Order::formatProfit($data['profit_money']);
        $data['credit'] = round($data['activate_money'] + $data['profit_money'], 2);
        $data['parent'] = $parent;
        unset($data['auth_key'], $data['pay_password'], $data['password_hash'], $data['password_reset_token']);
        $model = UserSettlement::find();
        $model->andWhere(['user_id' => Yii::$app->user->identity->id, 'agent_id' => Yii::$app->user->identity->agent_id]);
        $model->with(['agentProductType'=>function($query){
            $query->with('productType');
        }]);

        $result = $model->asArray()->all();
        if(empty($result)){
            $data['type'] = '';
        }
        foreach($result as $key => &$val)
        {
            $data['type'][$key]['name'] = $val['agentProductType']['productType']['name'];
            $data['type'][$key]['agent_product_type_id'] = $val['agent_product_type_id'];
            $data['type'][$key]['product_type_id'] = $val['agentProductType']['productType']['id'];
            $data['type'][$key]['level_cc_settlement'] = $val['level_cc_settlement'];
            $data['type'][$key]['level_dc_settlement'] = $val['level_dc_settlement'];
            $data['type'][$key]['capping'] = $val['capping'];
            $data['type'][$key]['cash_money'] = $val['cash_money'];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [],
            'data' => $data
        ];
    }

    /**
     * 设置登录密码
     *
     * @return number[]|array[]|string[][]|number[]|array[]|NULL[]
     */
    public function actionSetUpPassword()
    {
        $model = new SetUpPasswordForm();
        $model->load([
            'code' => $this->request->post('code'),
            'password' => $this->request->post('password'),
            'oldPassword' => $this->request->post('oldPassword')
        ], '');
        if ($model->setUpPassword(Yii::$app->user->identity)) {
            $userModel = Yii::$app->user->identity;
            $data = $userModel->toArray();
            unset($data['auth_key'], $data['pay_password'], $data['password_hash'], $data['password_reset_token']);
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '修改成功'
                ],
                'data' => $data
            ];
        } else {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $model->getFirstErrors(),
                'data' => []
            ];
        }
    }

    /**
     * 设置支付密码
     *
     * @return number[]|array[]|string[][]|number[]|array[]|NULL[]
     */
    public function actionSetUpPayPassword()
    {
        $model = new SetUpPayPasswordForm();
        $model->load([
            'code' => $this->request->post('code'),
            'password' => $this->request->post('password')
        ], '');

        if ($model->setUpPayPassword(Yii::$app->user->identity)) {
            $userModel = Yii::$app->user->identity;
            $data = $userModel->toArray();
            unset($data['auth_key'], $data['pay_password'], $data['password_hash'], $data['password_reset_token']);
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '设置成功'
                ],
                'data' => $data
            ];
        } else {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $model->getFirstErrors(),
                'data' => []
            ];
        }
    }

    /**
     * 用户编辑信息
     *
     * @return number[]|array[]|NULL[]|number[]|string[][]|\yii\web\IdentityInterface[]|NULL[]
     */
    public function actionSetProfile()
    {
        $avatar = $this->request->post('avatar');
        $model = Yii::$app->user->identity;
        $model->load([
            'avatar' => $avatar
        ], '');
        if (! $model->save()) {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $model->getFirstErrors(),
                'data' => []
            ];
        } else {
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '上传成功'
                ],
                'data' => $model
            ];
        }
    }

    /**
     * 编辑个人信息
     */
    public function actionEditInfo()
    {
        $post = $this->request->post();
        $model = new EditInfoForm();
        $model->load($post, '');
        if (! $model->editInfo(Yii::$app->user->identity)) {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $model->getFirstErrors(),
                'data' => []
            ];
        } else {
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '修改成功'
                ],
                'data' => ''
            ];
        }
    }

    /**
     * *
     * 问题反馈
     */
    public function actionFeedBack()
    {
        $post = $this->request->post();
        $model = new AppFeedBack();
        $post['agent_id'] = Yii::$app->user->identity->agent_id;
        $post['name'] = Yii::$app->user->identity->user_name;
        $post['app_id'] = 1;
        $post['created_at'] = time();
        $model->load($post, '');
        if (! $model->save()) {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $model->getFirstErrors(),
                'data' => []
            ];
        } else {
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '反馈成功'
                ],
                'data' => $model
            ];
        }
    }

    /**
     * *
     * 绑定银行卡
     */
    public function actionAddCard()
    {
        $post = $this->request->post();

        $post['agent_id'] = Yii::$app->user->identity->agent_id;
        $post['user_id'] = Yii::$app->user->identity->id;

        $user_bank_card = new AddCardForm();
        $user_bank_card->load($post, '');
        // var_dump($post);die;
        if ($user_bank_card->addCard()) {
            return [
                'status' => 0,
                'code' => 200,
                'message' => '绑定成功',
                'data' => []
            ];
        } else {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $user_bank_card->getFirstErrors(),
                'data' => []
            ];
        }
    }

//    获取当前用户的银行卡
    public function actionUserBankCard()
    {
        $userBankCard = UserBankCard::find();
        $userBankCard->andWhere(['user_id' => Yii::$app->user->id]);
        $userBankCard->with(['bankCard']);
        $userBankCard = $userBankCard->asArray()->one();
        $data['id'] = $userBankCard['id'];
        $data['agent_id'] = $userBankCard['agent_id'];
        $data['user_id'] = $userBankCard['user_id'];
        $data['cardNo'] = $userBankCard['cardNo'];
        $data['cardNo_secrect'] = str_replace(substr($userBankCard['cardNo'],4,-4),'********',$userBankCard['cardNo']);
        $data['bank_name'] = $userBankCard['bankCard']['name'];
        $data['bank'] = $userBankCard['bankCard']['bank'];
        $data['logo'] = $userBankCard['bankCard']['logo'];
        return [
            'status' => 0,
            'code' => 200,
            'message' => '',
            'data' => $data,
        ];
    }

//    累计收益
    public function actionProfit()
    {

        $profit = profit::find();
        $profit->andWhere([
            'user_id' => Yii::$app->user->id,
            'entry' => Profit::ENTRY
        ]);

//        $transactionTotal = TransactionTotal::findOne(['user_id'=>Yii::$app->user->id]);
//        $data['total_money'] = $transactionTotal['total_money'] ? $transactionTotal['total_money'] : 0;
        $data['total_money'] = Order::formatProfit($profit->sum('amount_profit'));
        $data['user_id'] = Yii::$app->user->id;
        return [
            'status' => 0,
            'code' => 200,
            'message' => '',
            'data' => $data,
        ];
    }

    /**
     * 获取所有银行卡
     */
    public function actionBankCard()
    {
        $model = BankCard::find();
        $model->andWhere([
            'status' => BankCard::OPEND_STATUS
        ]);
        $model->orderBy([
            'order' => SORT_ASC
        ]);
        $model->asArray();
        $data = $model->all();
        return [
            'status' => 0,
            'code' => 200,
            'message' => [],
            'data' => $data
        ];
    }

    /**
     * *
     * 忘记密码
     */
    public function actionForgetPwd()
    {
        $model = new ForgetPwdForm();
        $model->load([
            'mobile' => $this->request->post('mobile'),
            'code' => $this->request->post('code'),
            'password' => $this->request->post('password'),
            'repeat_password' => $this->request->post('repeat_password')
        ], '');
        if ($model->setUpPassword()) {
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '修改成功'
                ],
                'data' => []
            ];
        } else {
            return [
                'status' => 0,
                'code' => 0,
                'message' => $model->getFirstErrors(),
                'data' => []
            ];
        }
    }

    /**
     * 未登记详情
     */
    public function actionNotRegisterDetail()
    {
        $id = $this->request->post('user_id');
        $user = User::findOne([
            'id' => $id
        ]);
        $data['mobile'] = $user['mobile'];
        $data['user_code'] = $user['user_code'];
        $data['user_name'] = $user['user_name'];
        $data['real_name'] = $user['real_name'];
        $data['is_authentication'] = $user['is_authentication'];
        $data['created_at'] = date('Y-m-d H:i:s', $user['created_at']);
        $data['authentication_time'] = ! empty($user['authentication_time']) ? date('Y-m-d H:i:s', $user['authentication_time']) : '';

        $agentProductType = AgentProductType::find();
        $agentProductType->andWhere(['agent_id'=>$user['agent_id']]);
        $agentProductType->with('productType');
        foreach($agentProductType->all() as $key => $val){
            $data['type'][$key]['name'] = $val['productType']['name'];
            $data['type'][$key]['product_type_id'] = $val['product_type_id'];
            $data['type'][$key]['agent_product_type_id'] = $val['id'];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /**
     * 登记
     */
    public function actionRegister()
    {
        $post = $this->request->post();
        $user = User::findOne([
            'id' => $post['user_id']
        ]);
//          print_r($post);die;
        $result = '';
        $db = Yii::$app->db;
        $transaction = $db->beginTransaction();

        if(empty($post['data']))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有提交数据',
                'data' => []
            ];
        }

        foreach($post['data'] as $key => $val)
        {
//             print_r($val['level_cc_settlement']);die;
            $userSettlement = UserSettlement::findOne(['user_id'=>$post['user_id'],'agent_id'=>$user['agent_id'], 'agent_product_type_id'=> $val['agent_product_type_id']]);
            if(!empty($userSettlement))
            {
                $userSettlement->load([
                    'level_cc_settlement' => $val['level_cc_settlement'],
                    'level_dc_settlement' => $val['level_dc_settlement'],
                    'capping' => $val['capping'],
                    'cash_money' => $val['cash_money']
                ],'');
                $result = $userSettlement->save();
            }

            if(empty($userSettlement))
            {
                $userSettlement = new UserSettlement();
                $userSettlement->load([
                    'user_id' => $user['id'],
                    'agent_id' => $user['agent_id'],
                    'agent_product_type_id' => $val['agent_product_type_id'],
                    'level_cc_settlement' => $val['level_cc_settlement'],
                    'level_dc_settlement' => $val['level_dc_settlement'],
                    'capping' => $val['capping'],
                    'cash_money' => $val['cash_money']
                ],'');
                $result = $userSettlement->save();
            }
            if($userSettlement->validate() == false)
            {
                $transaction->rollBack();
                return [
                    'status' => 0,
                    'code' => 0,
                    'message' => $userSettlement->getFirstErrors(),
                    'data' => []
                ];
            }
        }
        if (!empty($result)) {
            $transaction->commit();
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '登记成功'
                ],
                'data' => []
            ];
        }
        $transaction->rollBack();
        return [
            'status' => 0,
            'code' => 0,
            'message' => $userSettlement->getFirstErrors(),
            'data' => []
        ];
    }

    /**
     * 已登记列表
     */
    public function actionRegisteredList()
    {
        $user =Yii::$app->user->identity;
        $post = $this->request->post();
        $user = User::registeredList($user,$post);
        foreach($user as $key => &$val)
        {
            $val['user_num'] = $val['user_num'] ?: 0;
            $val['agent_num'] = $val['agent_num'] ?: 0;
            $val['total_money_text'] = $val['total_money'] ? ($val['total_money'] > 10000 ? number_format($val['total_money']/10000,2,'.','').'万' : $val['total_money'] . '元') : 0 . '元';
            $val['money_per_user'] = !empty($val['user_num']) ? (number_format($val['total_money'] / $val['user_num'],2,'.','') > 10000 ?
                number_format($val['total_money'] / $val['user_num']/10000,2,'.','') . '万' :
                number_format($val['total_money'] / $val['user_num'],2,'.','') . '元') : 0 . '元';
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $user
        ];
    }

    /**
     * 未登记列表
     */
    public function actionNotRegisteredList()
    {
        $user_name = $this->request->post('user_name');

        $model = User::find();
        $model->select([
            'id',
            'agent_id',
            'user_name',
            'real_name',
            'is_authentication',
            'parent_id',
            'mobile',
            'avatar'
        ]);
        $model->andWhere([
            'parent_id' => Yii::$app->user->identity->id,
            'register' => 0
        ]);
        $model->andFilterWhere(
            [
                'or',
                ['like','user_name', $user_name],
                ['like','real_name', $user_name]
            ]
        );

        if ($this->request->post('register_time_start')) {
            $model->andFilterWhere([
                '>=',
                'created_at',
                strtotime($this->request->post('register_time_start') . ' 00:00:00')
            ]);
        }
        if ($this->request->post('register_time_end')) {
            $model->andFilterWhere([
                '<=',
                'created_at',
                strtotime($this->request->post('register_time_end') . ' 23:59:59')
            ]);
        }

        $user = $model->asArray()->all();

        if (empty($user)) {
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '已经登记完了'
                ],
                'data' => []
            ];
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $user
        ];
    }

    /**
     * 已登记详情
     */
    public function actionRegisteredDetail()
    {
        $id = $this->request->post('user_id');
        $user = User::findOne([
            'id' => $id
        ]);

        $userLink = UserLink::findOne([
            'user_id' => $id
        ]);
        $ids_array = [$id => $id];
        $childrenModel = $userLink->children();
        $childrenModel->andWhere([
            'agent_id' => Yii::$app->user->identity->agent_id
        ]);
        $childrenModel->select([
            'user_id'
        ]);
        $children_ids = $childrenModel->indexBy('user_id')->column();
        $ids_array = array_merge($ids_array,$children_ids);

        $data['user_id'] = $user['id'];
        $data['mobile'] = $user['mobile'];
        $data['user_code'] = $user['user_code'];
        $data['user_name'] = $user['user_name'];
        $data['real_name'] = $user['real_name'];
        $data['is_authentication'] = $user['is_authentication'];
        $data['frozen_earnings'] = $user['frozen_earnings'];
        $data['frozen_distributing'] = $user['frozen_distributing'];
        $data['created_at'] = date('Y-m-d H:i:s', $user['created_at']);
        $data['authentication_time'] = ! empty($user['authentication_time']) ? date('Y-m-d H:i:s',$user['authentication_time']) : '';

        $data['user_num'] = MerchantUser::find()->andWhere([
            'user_id' => $ids_array
        ])->count();
        $data['agent_num'] = User::find()->andWhere([
            'id' => $children_ids
        ])->count();
        $total_money = TransactionTotal::find()->andWhere([
            'user_id' => $ids_array
        ])->sum('total_money');
        $data['total_money'] = $total_money ? $total_money : 0;

        $product = Product::find()->andWhere([
            'user_id' => $ids_array,
        ]);
        $product->with(['agentProductType'=>function($q){
            $q->with('productType');
        }]);
        $data['product_num'] = $product->count();

        $product->groupBy('type_id');
        $data['product_detail'] = [];
        foreach($product->all() as $key => $val)
        {
            $data['product_detail'][$key] = [
                'type' => $val->agentProductType->productType->name,
                'activate_amount' => Product::find()->andWhere(['and',['in','user_id',$ids_array],['type_id'=>$val->type_id],['activate_status' => Product::YES]])->count(),
                'not_activate_amount' => Product::find()->andWhere(['and',['in','user_id',$ids_array],['type_id'=>$val->type_id],['activate_status' => Product::NO]])->count()
            ];
        }

        $data['product_activate_num'] = Product::find()->andWhere(['and',['user_id'=>$ids_array],['activate_status'=>Product::YES]])->count();
        $data['product_no_activate_num'] = $data['product_num'] - $data['product_activate_num'];

//        $productType = ProductType::find();
        $UserSettlement = UserSettlement::find();
        $UserSettlement->andWhere(['user_id'=>$id,'agent_id'=>$user['agent_id']]);
        $UserSettlement->with(['agentProductType'=>function($q){
            $q->with('productType');
        }]);
        $result = $UserSettlement->asArray()->all();
        foreach ($result as $key => $val) {
            $data['type'][$key]['name'] = $val['agentProductType']['productType']['name'];
            $data['type'][$key]['product_type_id'] = $val['agentProductType']['product_type_id'];

            $data['type'][$key]['level_cc_settlement'] = $val['level_cc_settlement'];
            $data['type'][$key]['level_dc_settlement'] = $val['level_dc_settlement'];
            $data['type'][$key]['capping'] = $val['capping'];
            $data['type'][$key]['cash_money'] = $val['cash_money'];
            $data['type'][$key]['agent_product_type_id'] = $val['agent_product_type_id'];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /**
     * 登记情况统计
     */
    public function actionRegisterNum()
    {
        $user_name = $this->request->post('user_name');
        $model = User::find();
        $model->andWhere([
            'parent_id' => Yii::$app->user->identity->id
        ]);

        $user = User::find()->andWhere([
            'parent_id' => Yii::$app->user->identity->id,
            'register' => 1
        ]);

        $user->andFilterWhere([
            'or',
            ['like','user_name', $user_name],
            ['like','real_name', $user_name]
        ]);

        if ($this->request->post('created_at_start')) {
            $user->andFilterWhere([
                '>=',
                'created_at',
                strtotime($this->request->post('created_at_start') . ' 00:00:00')
            ]);
        }
        if ($this->request->post('created_at_end')) {
            $user->andFilterWhere([
                '<=',
                'created_at',
                strtotime($this->request->post('created_at_end') . ' 23:59:59')
            ]);
        }

        $data['register_num'] = $user->count();

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /**
     * 未登记情况统计
     */
    public function actionNotRegisterNum()
    {
        $user_name = $this->request->post('user_name');
        $model = User::find();
        $model->andWhere([
            'parent_id' => Yii::$app->user->identity->id
        ]);

        $user = User::find()->andWhere([
            'parent_id' => Yii::$app->user->identity->id,
            'register' => 0
        ]);

        $user->andFilterWhere([
            'or',
            ['like','user_name', $user_name],
            ['like','real_name', $user_name]
        ]);

        if ($this->request->post('created_at_start')) {
            $user->andFilterWhere([
                '>=',
                'created_at',
                strtotime($this->request->post('created_at_start') . ' 00:00:00')
            ]);
        }
        if ($this->request->post('created_at_end')) {
            $user->andFilterWhere([
                '<=',
                'created_at',
                strtotime($this->request->post('created_at_end') . ' 23:59:59')
            ]);
        }

        $data['not_register_num'] = $user->count();

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    /**
     * 冻结收益
     */
    public function actionFrozenProfit()
    {
        $frozen_earnings = $this->request->post('frozen_earnings');
        $frozen_distributing = $this->request->post('frozen_distributing');
        $user_id = $this->request->post('user_id');

        $user = User::findOne([
            'id' => $user_id
        ]);
        $user->frozen_earnings = $frozen_earnings;
        $user->frozen_distributing = $frozen_distributing;
        if ($user->save()) {
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '冻结成功'
                ],
                'data' => []
            ];
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                $user->getFirstErrors()
            ],
            'data' => []
        ];
    }

    /**
     * 保存用户客户端id
     */
    public function actionSaveClientId()
    {

        $client_id = $this->request->post('client_id');

        $user = User::findOne([
            'id' => Yii::$app->user->id
        ]);

        if(empty($user->client_id) || $client_id != $user->client_id){
            $user->client_id = $client_id;
            if (!($user->save())) {
                return [
                    'status' => 0,
                    'code' => 200,
                    'message' => [
                        $user->getFirstErrors()
                    ],
                    'data' => []
                ];
            }
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                '保存成功'
            ],
            'data' => []
        ];

    }
}