<?php
namespace app\modules\v1\controllers;

use common\models\product\Product;
use common\models\product\ProductLog;
use common\models\Transaction;
use common\models\user\User;
use common\models\user\UserSettlement;
use yii;
use yii\filters\auth\HttpBearerAuth;

class ProductController extends BaseActiveController
{
    public $modelClass = 'common\models\product\Product';

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authenticator'] = [
            'class' => HttpBearerAuth::className(),
        ];

        return $behaviors;
    }

//    机具信息
    public function actionList()
    {
        $product_no = $this->request->post('product_no');
        $activate_status = $this->request->post('activate_status');
        $status = $this->request->post('status');
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        if ($page <= 1) {
            $page = 1;
        }

        $model = Product::find();
        $model->select([
            'id',
            'user_id',
            'product_no',
            'type_id',
            'activate_status',
            'status',
            'agent_id',
            'expire_time',
        ]);

        if($status == Product::NO_SEND)
        {
            $model->andWhere(['user_id'=>Yii::$app->user->id,'agent_id'=>Yii::$app->user->identity->agent_id]);
        }else{
            $ids = User::find()->select(['id'])->where(['parent_id'=>Yii::$app->user->id,'agent_id'=>Yii::$app->user->identity->agent_id])->indexBy('id')->column();
            $model->andWhere(['and',['in','user_id',$ids],['status'=>Product::SEND]]);
        }


        $model->andFilterWhere(['like','product_no',$product_no]);
        $model->andFilterWhere(['activate_status'=>$activate_status]);
        $model->with(['agentProductType'=>function($q){
            $q->select(['id','agent_id','product_type_id','created_at','updated_at']);
            $q->with('productType');
        }]);
        $model->orderBy(['activate_status'=>SORT_DESC,'expire_time'=>SORT_ASC,'product_no'=>SORT_ASC]);
        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        $data['list']  = $model->asArray()->all();

        if(empty($data['list']))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => []
            ];
        }

        foreach($data['list'] as $key => &$val)
        {
            $data['list'][$key]['expire_time'] = date('Y-m-d',$val['expire_time']);
            $data['list'][$key]['activate_status_text'] = $val['activate_status'] == 1 ? '已激活' : '未激活';
        }

        $product = Product::find();
        if($status == Product::NO_SEND)
        {
            $product->andWhere(['user_id'=>Yii::$app->user->id,'agent_id'=>Yii::$app->user->identity->agent_id]);
        }else{
            $product->andWhere(['and',['in','user_id',$ids],['status'=>Product::SEND]]);
        }
        $product->andFilterWhere(['like','product_no',$product_no]);
        $product->andFilterWhere(['activate_status'=>$activate_status]);
        $data['total'] = $product->count();

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有机具信息',
                'data' => []
            ];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//   机具详情
    public function actionDetail()
    {
        $model = Product::find();
        $model->select([
           'id',
           'product_no',
            'type_id',
            'model',
            'expire_time',
            'agent_id',
            'activate_status',
            'activate_time',
            'send_time',
            'user_name'
        ]);
        $model->andWhere(['agent_id'=>Yii::$app->user->identity->agent_id, 'id'=>$this->request->post('id')]);
        $model->with(['agentProductType'=>function($q){
            $q->select(['id','agent_id','product_type_id','created_at','updated_at']);
            $q->with('productType');
        }]);
        $model->with(['merchantUser'=>function($q){
            $q->select(['serialNo','merchantId','merchantName']);
        }]);
        $data  = $model->asArray()->one();
        $data['expire_time'] = date('Y-m-d',$data['expire_time']);
        $data['activate_time'] = !empty($data['activate_time']) ? date('Y-m-d H:i:s',$data['activate_time']) : '';
        $data['activate_status_text'] = $data['activate_status'] == 1 ? '已激活' : '未激活';
        $data['send_time'] = !empty($data['send_time']) ? date('Y-m-d H:i:s',$data['send_time']) : '';
        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有机具信息',
                'data' => []
            ];
        }

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    选择下发机具
    public function actionSelectProductSend()
    {
        $product_no = $this->request->post('product_no');
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 15);
        if ($page <= 1) {
            $page = 1;
        }

        $model = Product::find();
        $model->select(['id','product_no','expire_time','agent_id','status','activate_status']);
        $model->andWhere(['agent_id'=>Yii::$app->user->identity->agent_id, 'user_id'=>Yii::$app->user->id]);
        $model->andWhere(['<>','activate_status',1]);
        $model->andWhere(['!=','status', Product::REFUND]);
        $model->andFilterWhere(['like','product_no',$product_no]);
        $model->orderBy(['expire_time'=>SORT_ASC,'product_no'=>SORT_ASC]);

        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        $data = $model->asArray()->all();

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => $data
            ];
        }

        foreach($data as $key => &$val)
        {
            $val['expire_time'] = date('Y-m-d',$val['expire_time']);
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    选择回拨机具
    public function actionSelectProductBack()
    {
        $product_no = $this->request->post('product_no');
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 15);
        if ($page <= 1) {
            $page = 1;
        }

        $user_id = $this->request->post('user_id');
        $model = Product::find();
        $model->select(['id','product_no','expire_time','agent_id','status','activate_status']);
        $model->andWhere(['agent_id'=>Yii::$app->user->identity->agent_id,'user_id'=>$user_id]);
        $model->andWhere(['<>','activate_status',1]);
        $model->andWhere(['in','status', [Product::SEND,Product::NO_SEND]]);
        $model->andFilterWhere(['like','product_no',$product_no]);
        $model->orderBy(['expire_time'=>SORT_ASC,'product_no'=>SORT_ASC]);

        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        $data = $model->asArray()->all();

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => $data
            ];
        }

        foreach($data as $key => &$val)
        {
            $val['expire_time'] = date('Y-m-d',$val['expire_time']);
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    下发记录
    public function actionSendLog()
    {
        $value = $this->request->post('value');
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        if ($page <= 1) {
            $page = 1;
        }

        $model = ProductLog::find();
        $model->select(['id','agent_product_type_id','mobile','user_name','status','agent_id','product_no','expire_time','send_time']);
        $model->andFilterWhere(['or',['like','user_name',$value],['like','mobile',$value]]);
        $model->andWhere(['status'=>Product::SEND, 'agent_id'=>Yii::$app->user->identity->agent_id, 'user_id'=>Yii::$app->user->identity->id]);
        $model->with(['agentProductType'=>function($q){
            $q->select(['id','agent_id','product_type_id','created_at','updated_at']);
            $q->with('productType');
        }]);
        $model->with(['product'=>function($q){
            $q->select(['expire_time','product_no']);
        }]);

        $model->orderBy(['send_time'=>SORT_DESC]);
        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        $data = $model->asArray()->all();

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => []
            ];
        }

        foreach($data as $key=> &$val)
        {
            $val['expire_time'] = date('Y-m-d',$val['product']['expire_time']);
            $val['send_time'] = date('Y-m-d H:i:s',$val['send_time']);
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

    //    回拨记录
    public function actionBackLog()
    {
        $value = $this->request->post('value');
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        if ($page <= 1) {
            $page = 1;
        }

        $ids = User::find()->select(['id'])->andWhere(['parent_id'=>Yii::$app->user->id])->indexBy('id')->column();

        $model = ProductLog::find();
        $model->select(['id','agent_product_type_id','mobile','user_name','status','agent_id','product_no','expire_time','back_time']);
        $model->andWhere(['status'=>4, 'agent_id'=>Yii::$app->user->identity->agent_id, 'user_id'=>Yii::$app->user->id]);
        $model->andFilterWhere(['or',['like','user_name',$value],['like','mobile',$value]]);
        $model->with(['agentProductType'=>function($q){
            $q->select(['id','agent_id','product_type_id','created_at','updated_at']);
            $q->with('productType');
        }]);
        $model->with(['product'=>function($q){
            $q->select(['expire_time','product_no']);
        }]);

        $model->orderBy(['back_time'=>SORT_DESC]);
        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        $data = $model->asArray()->all();

        if(empty($data))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => []
            ];
        }

        foreach($data as $key=> &$val)
        {
            $val['expire_time'] = date('Y-m-d',$val['product']['expire_time']);
            $val['back_time'] = date('Y-m-d H:i:s',$val['back_time']);
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    下发
    public function actionSendUpdate()
    {
        $id = $this->request->post('id');
        $id_arr = explode(',',$id);
        $user_id = $this->request->post('user_id');
        $serial_number = ProductLog::getSerial(Product::SEND);
        $user = User::findOne(['id'=>$user_id]);
        $model = Product::find();
        $model->andWhere(['id'=>$id_arr]);

        $product_no_ids = Product::find()->select(['product_no'])->andWhere(['in','id',$id_arr])->indexBy('product_no')->column();
        $trans = Transaction::find()->andWhere(['in','serialNo',$product_no_ids])->one();
        if(!empty($trans))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '下发机具已有交易信息，无法下发',
                'data' => []
            ];
        }

        $transaction = Yii::$app->db->beginTransaction();
        foreach($model->all() as $m)
        {
            $product_log = new ProductLog();
            $product_log->load([
                'serial' => $serial_number,
                'send_time' => time(),
                'name' => Yii::$app->user->identity->real_name ?: Yii::$app->user->identity->user_name,
                'status' => Product::SEND,
                'model' => $m->model,
                'user_name' => !empty($user['real_name']) ? $user['real_name'] :$user['user_name'],
                'user_code' => $user['user_code'],
                'mobile' => $user['mobile'],
                'agent_id' => $user['agent_id'],
                'agent_product_type_id' => $m->type_id,
                'product_no' => $m->product_no,
                'user_id' => Yii::$app->user->id
            ], '');
            $result = $product_log->save();

            $m->load([
               'status' => Product::SEND,
               'user_id' => $user['id'],
               'user_name' => $user['real_name'] ?: $user['user_name'],
               'user_code' => $user['user_code'],
               'mobile' => $user['mobile'],
                'send_time' => time(),

            ],'');

            if($m->validate() != true)
            {
                $transaction->rollBack();
                return [
                    'status' => 0,
                    'code' => 0,
                    'message' =>$m->getFirstErrors(),
                    'data' => []
                ];
            }
            $success = $m->save();
        }
        if($success && $result)
        {
            $transaction->commit();
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '下发成功'
                ],
                'data' => []
            ];
        }
        return [
            'status' => 0,
            'code' => 0,
            'message' => [
                '下发失败'
            ],
            'data' => []
        ];
    }

//    区间下发
    public function actionBatchSend()
    {
        $user_id = $this->request->post('user_id');
        $user = User::findOne(['id'=>$user_id]);
        $product_no_start = $this->request->post('product_no_start');
        $product_no_end = $this->request->post('product_no_end');

        $len = $product_no_end - $product_no_start + 1;

        $length = strlen($product_no_start);
        for($i=0;$i<$len;$i++)
        {
            $product_no_data[$i] = sprintf("%0".$length."d", $product_no_start++);
        }

        $exist = Product::find()->andWhere(['and',['product_no'=>$product_no_data],['!=', 'user_id', Yii::$app->user->id]])->one();
        if(!empty($exist))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '机具编号为' . $exist->product_no . '的机具不存在或已下发',
                'data' => []
            ];
        }

        $serial = ProductLog::getSerial(Product::SEND);

      $condition = [
            'and',
              ['activate_status' => Product::NO],
               [
                   'user_id' => Yii::$app->user->id
               ],
            'agent_id' => Yii::$app->user->identity->agent_id
       ];
        $product_no_arr = Product::find()->select(['product_no'])->andWhere($condition)->indexBy('product_no')->column();

        $not_exist = array_values(array_diff($product_no_data, $product_no_arr));
        if(!empty($not_exist))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '机具编号为' . $not_exist[0] . '不存在',
                'data' => []

            ];
        }

        $product_no_arr = array_intersect($product_no_arr,$product_no_data);

        $where = [
            'and',
            ['activate_status' => Product::NO],
            [
                'user_id' => Yii::$app->user->id
            ],
            [
                'in',
                'product_no',
                $product_no_arr
            ]
        ];

        $product = Product::find()->andWhere($where)->all();

        if(empty($product))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '该区间没有可下发的机具',
                'data' => []
            ];
        }

        $trans = Transaction::find()->andWhere(['in','serialNo',$product_no_arr])->one();
        if(!empty($trans)){
            return [
                'status' => 0,
                'code' => 0,
                'message' => '下发的机具中已有交易订单，无法下发',
                'data' => []
            ];
        }

        $product_arr = Product::find()->andWhere($where)->one();
        $userSettlement = UserSettlement::find()->andWhere(['user_id'=>$user_id,'agent_id'=>Yii::$app->user->identity->agent_id, 'agent_product_type_id'=>$product_arr->type_id])->one();
        if(empty($userSettlement))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '还没登记该机具类型的结算价',
                'data' => []
            ];
        }

        $transaction = Yii::$app->db->beginTransaction();

        try{


            $result = Product::updateAll([
                'user_name' => !empty($user->real_name) ? $user->real_name : $user->user_name,
                'user_code' => $user->user_code,
                'user_id' => $user_id,
                'status' => Product::SEND,
                'mobile' => $user->mobile,
                'send_time' => time()
            ], $where);

            foreach($product as $key => $val)
            {
                $data[$key]['product_no'] = $val->product_no;
                $data[$key]['agent_product_type_id'] = $val->type_id;
                $data[$key]['send_time'] = time();
                $data[$key]['model'] = $val->model;
                $data[$key]['status'] = Product::SEND;
                $data[$key]['agent_id'] = $user->agent_id;
                $data[$key]['user_id'] = Yii::$app->user->id;
                $data[$key]['serial'] = $serial;
                $data[$key]['name'] = Yii::$app->user->identity->real_name ?: Yii::$app->user->identity->user_name;
                $data[$key]['user_name'] = $user->real_name ? $user->real_name : $user->user_name;
                $data[$key]['user_code'] = $val->user_code;
                $data[$key]['mobile'] = $val->mobile;
            }

            $success = Yii::$app->db->createCommand()
                ->batchInsert(ProductLog::tableName(), [
                    'product_no',
                    'agent_product_type_id',
                    'send_time',
                    'model',
                    'status',
                    'agent_id',
                    'user_id',
                    'serial',
                    'name',
                    'user_name',
                    'user_code',
                    'mobile'
                ], $data)
                ->execute();

            if($result && $success)
            {
                $transaction->commit();
                return [
                    'status' => 0,
                    'code' => 200,
                    'message' => '下发成功',
                    'data' => []
                ];
            }

            $transaction->rollBack();
            return [
                'status' => 0,
                'code' => 0,
                'message' => '下发失败',
                'data' => []
            ];
        }catch(\Exception $e){
            $transaction->rollBack();
            return [
                'status' => 0,
                'code' => 0,
                'message' => $e->getMessage(),
                'data' => []
            ];
        }
    }

//    区间回拨
    public function actionBatchBack()
    {
        $user_id = $this->request->post('user_id');
        $product_no_start = $this->request->post('product_no_start');
        $product_no_end = $this->request->post('product_no_end');

        $len = $product_no_end - $product_no_start + 1;

        $length = strlen($product_no_start);
        for($i=0;$i<$len;$i++)
        {
            $product_no_data[$i] = sprintf("%0".$length."d", $product_no_start++);
        }

        $serial = ProductLog::getSerial(Product::NO_SEND);

        $condition = [
            'and',
            ['activate_status' => Product::NO],
            'agent_id' => Yii::$app->user->identity->agent_id,
            'user_id' => $user_id,

        ];

        $product_no_arr = Product::find()->select(['product_no'])->andWhere($condition)->indexBy('product_no')->column();

        $not_exist = array_values(array_diff($product_no_data, $product_no_arr));
        if(!empty($not_exist))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '机具编号为' . $not_exist[0] . '不存在',
                'data' => []

            ];
        }

        $product_no_arr = array_intersect($product_no_arr,$product_no_data);

        $where = [
            'and',
            ['activate_status' => Product::NO],
            [
                'user_id' => $user_id
            ],
            [
                'in',
                'product_no',
                $product_no_arr
            ]
        ];

        $product = Product::find()->andWhere($where)->all();

        if(empty($product))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '该区间没有可回拨的机具',
                'data' => []
            ];
        }

        $trans = Transaction::find()->andWhere(['in','serialNo',$product_no_arr])->one();
        if(!empty($trans)){
            return [
                'status' => 0,
                'code' => 0,
                'message' => '回拨的机具中已有交易订单，无法回拨',
                'data' => []
            ];
        }

        $product_arr = Product::find()->andWhere($where)->one();
        $userSettlement = UserSettlement::find()->andWhere(['user_id'=>$user_id,'agent_id'=>Yii::$app->user->identity->agent_id, 'agent_product_type_id'=>$product_arr->type_id])->one();
        if(empty($userSettlement))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '还没登记该机具类型的结算价',
                'data' => []
            ];
        }

        $transaction = Yii::$app->db->beginTransaction();

        try{
            $result = Product::updateAll([
                'user_id' => Yii::$app->user->id,
                'status' => Product::NO_SEND,
                'mobile' => Yii::$app->user->identity->mobile,
                'back_time' => time(),
                'user_code' => Yii::$app->user->identity->user_code,
                'user_name' => !empty(Yii::$app->user->identity->real_name) ? Yii::$app->user->identity->real_name : Yii::$app->user->identity->user_name,
            ], $where);

            foreach($product as $key => $val)
            {
                $data[$key]['product_no'] = $val->product_no;
                $data[$key]['agent_product_type_id'] = $val->type_id;
                $data[$key]['back_time'] = time();
                $data[$key]['model'] = $val->model;
                $data[$key]['status'] = Product::NO_SEND;
                $data[$key]['agent_id'] = Yii::$app->user->identity->agent_id;
                $data[$key]['user_id'] = Yii::$app->user->id;
                $data[$key]['serial'] = $serial;
                $data[$key]['name'] = Yii::$app->user->identity->real_name ?: Yii::$app->user->identity->user_name;
                $data[$key]['user_name'] = $val->user_name;
                $data[$key]['user_code'] = $val->user_code;
                $data[$key]['mobile'] = $val->mobile;
            }

            $success = Yii::$app->db->createCommand()
                ->batchInsert(ProductLog::tableName(), [
                    'product_no',
                    'agent_product_type_id',
                    'back_time',
                    'model',
                    'status',
                    'agent_id',
                    'user_id',
                    'serial',
                    'name',
                    'user_name',
                    'user_code',
                    'mobile'
                ], $data)
                ->execute();

            if($result && $success)
            {
                $transaction->commit();
                return [
                    'status' => 0,
                    'code' => 200,
                    'message' => '回拨成功',
                    'data' => []
                ];
            }

            $transaction->rollBack();
            return [
                'status' => 0,
                'code' => 0,
                'message' => '回拨失败',
                'data' => []
            ];
        }catch(\Exception $e)
        {
            $transaction->rollBack();
            return [
                'status' => 0,
                'code' => 0,
                'message' => $e->getMessage(),
                'data' => []
            ];
        }

    }

//    回拨
    public function actionBackUpdate()
    {
        $id = $this->request->post('id');
        $id_arr = explode(',',$id);
//        $user_id = $this->request->post('user_id');
        $serial_number = ProductLog::getSerial(Product::NO_SEND);
        $model = Product::find();
        $model->andWhere(['id'=>$id_arr]);

        $product_no_ids = Product::find()->select(['product_no'])->andWhere(['in','id',$id_arr])->indexBy('product_no')->column();
        $trans = Transaction::find()->andWhere(['in','serialNo',$product_no_ids])->one();
        if(!empty($trans))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '回拨机具中已有交易信息，无法回拨',
                'data' => []
            ];
        }

        foreach($model->all() as $m)
        {
            $product_log = new ProductLog();
            $product_log->load([
                'serial' => $serial_number,
                'back_time' => time(),
                'name' => Yii::$app->user->identity->real_name ?: Yii::$app->user->identity->user_name,
                'status' => Product::NO_SEND,
                'model' => $m->model,
                'user_name' => $m->user_name,
                'user_code' => $m['user_code'],
                'mobile' => $m['mobile'],
                'agent_id' => $m['agent_id'],
                'agent_product_type_id' => $m->type_id,
                'product_no' => $m->product_no,
                'user_id' => Yii::$app->user->id
            ], '');
            $result = $product_log->save();

            $m->status = 4;
            $m->send_time = 0;
            $m->back_time = time();
            $m->user_code = Yii::$app->user->identity->user_code;
            $m->user_name = !empty(Yii::$app->user->identity->real_name) ? Yii::$app->user->identity->real_name : Yii::$app->user->identity->user_name;
            $m->user_id = Yii::$app->user->id;
            $success = $m->save();
        }
        if($success && $result){
            return [
                'status' => 0,
                'code' => 200,
                'message' => [
                    '回拨成功'
                ],
                'data' => []
            ];
        }
        return [
            'status' => 0,
            'code' => 0,
            'message' => [
                '回拨失败'
            ],
            'data' => []
        ];
    }

//    下发机具管理
    public function actionSend()
    {
        $value = $this->request->post('value');
        $user = User::find();
        $user->andWhere([
            'parent_id'=>Yii::$app->user->identity->id,
            'register' => User::REGISTER
        ]);
        $user->andFilterWhere(['or',['like','user_name',$value],['like','real_name',$value],['like','mobile',$value]]);

        if(empty($user->all()))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => []
            ];
        }

        foreach($user->all() as $key=> $val)
        {
            $data[$key]['avatar'] = $val['avatar'];
            $data[$key]['name'] = !empty($val['real_name']) ? $val['real_name'] : $val['user_name'];
            $data[$key]['user_id'] = $val['id'];
            $data[$key]['agent_id'] = $val['agent_id'];
        }

        foreach($data as $key => $val)
        {
            $model = Product::find();
            $model->andWhere(['and',['user_id' => $val['user_id']],['in','status',[Product::SEND,Product::NO_SEND]]]);
            $data[$key]['num'] = $model->count();
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    回拨机具管理
    public function actionBack()
    {
        $value = $this->request->post('value');
        $user = User::find();
        $user->andWhere([
            'parent_id' => Yii::$app->user->identity->id,
            'register' => User::REGISTER
        ]);
        $user->andFilterWhere(['or',['like','user_name',$value],['like','real_name',$value],['like','mobile',$value]]);

        if(empty($user->all()))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => []
            ];
        }

        foreach($user->all() as $key=> $val)
        {
            $data[$key]['avatar'] = $val['avatar'];
            $data[$key]['name'] = !empty($val['real_name']) ? $val['real_name'] : $val['user_name'];
            $data[$key]['user_id'] = $val['id'];
            $data[$key]['agent_id'] = $val['agent_id'];
        }

        foreach($data as $key => $val)
        {
            $model = Product::find();
            $model->andWhere(['and',['user_id' => $val['user_id']],['in','status',[Product::SEND,Product::NO_SEND]]]);
            $data[$key]['num'] = $model->count();
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }



}