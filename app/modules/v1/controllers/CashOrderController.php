<?php
namespace app\modules\v1\controllers;

use yii;
use yii\web\Controller;
use yii\helpers\Url;
use yii\filters\auth\HttpBearerAuth;
use common\models\user\UserBankCard;
use common\models\user\BankCard;
use common\library\changjie\PrePay;
use common\models\agent\Agent;
use common\models\CashOrder;
use common\models\Order;
use common\models\user\User;
use common\models\user\UserIdentityAudit;
use common\services\app\UpdateMoneyForm;
use common\components\queue\job\OnlineWithdraw;

class CashOrderController extends BaseActiveController
{

    public $modelClass = 'common\models\CashOrder';

    public $type;

    public $money;

    public $bank;

    public $cardNo;

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authenticator'] = [
            'class' => HttpBearerAuth::className(),
            'optional' => []
        ];
        
        return $behaviors;
    }

    public function actionIsSetPaypassword()
    {
        if(empty(Yii::$app->user->identity->pay_password))
        {
            return [
                'status' => 0,
                'code' => 0,
                'message' => '请先设置支付密码',
                'data' => ''
            ];
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => '',
            'data' => ''
        ];
    }

    public function actionWithdrawView()
    {
        $type = $this->request->post('type');
        $model = UserBankCard::find();
        $model->andWhere([
            'user_id' => Yii::$app->user->id,
            'is_delete' => UserBankCard::NOT_DELETE
        ]);
        $model->select([
            'a.bank',
            'a.id',
            'a.cardNo'
        ]);
        $model->alias('a');
        $model->joinWith([
            'bankCard' => function ($q) {
                $q->select([
                    'b.name',
                    'b.bank',
                    'b.logo'
                ]);
                $q->andWhere([
                    'b.status' => BankCard::OPEND_STATUS
                ]);
                $q->alias('b');
            }
        ]);
        $model->asArray();
        $row = $model->limit(1)->one();
        
        // 可用余额
        $user = User::findOne([
            'id' => Yii::$app->user->id
        ]);
       $agent = Agent::findOne([
            'id' => Yii::$app->user->identity->agent_id
        ]);

        if(Agent::CASH_STATUS_CLOSE == $agent['cash_status'])
        {
            $agent['min_cashback'] = Yii::$app->debris->config('min_cashback');
            $agent['cashback_fee'] = Yii::$app->debris->config('cashback_fee');
            $agent['cash_fee'] =Yii::$app->debris->config('cash_fee');
            $agent['tax_point'] = Yii::$app->debris->config('tax_point');
            $agent['min_cash_amount'] = Yii::$app->debris->config('min_cash_amount');
            $agent['cashback_tax_point'] = Yii::$app->debris->config('cashback_tax_point');
        }

        // type=1激活提现 2分润提现
        if ($type == CashOrder::RETURN_CASH) {
            $row['total_money'] = $user['activate_money'];
            $row['min_withdraw_money'] = $agent['min_cashback'];
            $row['cashback_tax_point'] = $agent['cashback_tax_point'];
            $row['fee'] = $agent['cashback_fee'];
        } else {
            $row['total_money'] = $user['profit_money'];
            $row['fee'] = $agent['cash_fee'];
            $row['tax_point'] = $agent['tax_point'];
            $row['min_withdraw_money'] = $agent['min_cash_amount'];
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $row
        ];
    }

    /**
     * 提现
     */
    public function actionWithdraw()
    {
        $bank = $this->request->post('bank');
        $cardNo = $this->request->post('cardNo');
        $money = $this->request->post('money');
        $type = $this->request->post('type');
        $pay_password = $this->request->post('pay_password');
        
        $agent = Agent::findOne([
            'id' => Yii::$app->user->identity->agent_id
        ]);

        /*$bankInfo = BankCard::findOne([
            'bank' => $bank
        ]);*/

        if(Agent::CASH_STATUS_CLOSE == $agent['cash_status'])
        {
            $agent['min_cashback'] = Yii::$app->debris->config('min_cashback');
            $agent['cashback_fee'] = Yii::$app->debris->config('cashback_fee');
            $agent['cash_fee'] = Yii::$app->debris->config('cash_fee');
            $agent['tax_point'] = Yii::$app->debris->config('tax_point');
            $agent['min_cash_amount'] = Yii::$app->debris->config('min_cash_amount');
            $agent['cashback_tax_point'] = Yii::$app->debris->config('cashback_tax_point');
        }

        if ( CashOrder::RETURN_CASH == $type ) {
            $fee = $agent['cashback_fee'] + $money * $agent['cashback_tax_point'] / 100;
        } else {
            $fee = $agent['cash_fee'] + $money * $agent['tax_point'] / 100;
        }

        $db = Yii::$app->db;
        $transaction = $db->beginTransaction();
        $model = new UpdateMoneyForm();
        $model->load([
            'money' => $money,
            'type' => $type,
            'fee' => $fee,
            'pay_password' => $pay_password,
        ], '');
        if ($model->updateMoney(Yii::$app->user->identity)) {
            
            /*$CorpPushUrl = Url::toRoute([
                '/chang-jie-async/online-withdraw'
            ], true);*/
            
            // var_dump($CorpPushUrl);die;
            $OutTradeNo = date('ymdHis') . rand(1000, 9999);
            
            /*$PrePay = new PrePay();
            $PrePay->load([
                'AcctNo' => $cardNo,
                'BusinessType' => 0,
                'BankCode' => $bank,
                'TransAmt' => $money,
                'AcctName' => Yii::$app->user->identity->real_name,
                'OutTradeNo' => $OutTradeNo,
                'BankCommonName' => $bankInfo['name'],
                'BranchBankName' => '中国建设银行广州东山广场分理处',
                'CorpPushUrl' => $CorpPushUrl,
                'AccountType' => '00'
            ], '');
            $http = $PrePay->http();
            $content = $http->send()->content;
            $content = json_decode($content, true);*/

            $cashOrder = new CashOrder();
            $cashOrder->load([
                'agent_id' => Yii::$app->user->identity->agent_id,
                'user_id' => Yii::$app->user->id,
                'type' => $type,
                'cash_amount' => $money,
                'fee' => $fee,
                'account_amount' => ($money - $fee),
                'cash_provider' => Yii::$app->user->identity->real_name,
                'status' => 0,
                'mobile' => Yii::$app->user->identity->mobile,
                'created_at' => time(),
                'bank' => $bank,
                'cardNo' => $cardNo,
                'order' => $OutTradeNo,
                'unique_order' => $OutTradeNo,
                'agent_fee' => $agent->agent_fee,
            ], '');
            $cashOrder->save();

//            var_dump($cashOrder->getFirstErrors());die;
            
            $Order = new Order();
            $Order->load([
                'user_id' => Yii::$app->user->id,
                'agent_id' => Yii::$app->user->identity->agent_id,
                'type' => $type,
                'amount' => $money,
                'status' => 0,
                'created_at' => time(),
                'order' => $OutTradeNo,
                'unique_order' => $OutTradeNo,
                'entry' => 0
            ], '');
            $Order->save();
            
            /*if (isset($content['AppRetcode']) && $content['AppRetcode'] == '01019999') {
                $transaction->commit();
                Yii::$app->queue->delay(3600 * 24)->push(new OnlineWithdraw([
                    'outerTradeNo' => $OutTradeNo
                ]));
                return [
                    'status' => 0,
                    'code' => 200,
                    'message' =>
                        '提现成功',
                    'data' => $Order
                ];
            }*/
            $transaction->commit();
            return [
                'status' => 0,
                'code' => 200,
                'message' => 
                    '提交成功',
                'data' => []
            ];
            // print_r($content);die;
        }
        $transaction->rollBack();
        return [
            'status' => 0,
            'code' => 0,
            'message' => $model->getFirstErrors(),
            'data' => []
        ];
    }

    /**
     * 提现记录
     */
    public function actionWithdrawList()
    {
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        if ($page <= 1) {
            $page = 1;
        }
        
        $model = CashOrder::find();
        $model->andWhere([
            'user_id' => Yii::$app->user->id,
            'agent_id' => Yii::$app->user->identity->agent_id
        ]);
        $model->with([
            'bankCard'
        ]);

        $model->orderBy(['created_at'=>SORT_DESC]);
        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        
        $data = $model->all();

        if(empty($data)){
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => ''
            ];
        }

        foreach ($data as $key => $val) {
            $datas[$key] = $val->toArray();
            $datas[$key]['created_at'] = date('Y-m-d H:i:s', $val->created_at);
            $datas[$key]['type_text'] = $val->getType();
            $datas[$key]['status_text'] = $val->getStatus();
            $datas[$key]['cardNo'] = $val['cardNo'];
            $datas[$key]['bank'] = $val['bankCard']['name'];
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $datas
        ];
    }

    /**
     * 提现统计
     */
    public function actionWithdrawTotal()
    {
        $data['totalMoney'] = CashOrder::find()->andWhere([
            'user_id' => Yii::$app->user->id,
            'agent_id' => Yii::$app->user->identity->agent_id,
            'status' => CashOrder::SUCCESS
        ])->sum('cash_amount');
        $data['totalMoney'] = !empty($data['totalMoney']) ? $data['totalMoney'] : 0;
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }
}