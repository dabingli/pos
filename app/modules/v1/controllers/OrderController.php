<?php
namespace app\modules\v1\controllers;

use common\models\CashOrder;
use common\models\Order;
use common\models\Profit;
use yii;
use yii\filters\auth\HttpBearerAuth;

class OrderController extends BaseActiveController
{

    public $modelClass = 'common\models\user\User';

    public function behaviors()
    {
        $behaviors = parent::behaviors(); // TODO: Change the autogenerated stub
        $behaviors['authenticator'] = [
            'class' => HttpBearerAuth::className(),
            'optional' => [
                'login',
                'signup',
                'signup-code',
                'set-up-password-code'
            ]
        ];
        
        return $behaviors;
    }

//    订单类型
    public function actionTypeList()
    {
        $i = 0;
        $k = 0;
        $type = [0=>'全部'];
        $type = array_merge($type,Order::typeLabels());
        foreach($type as $key=>  $val)
        {
            if($key != 0)
            {
                $data['all'][$i-1]['type'] = $val;
                $data['all'][$i-1]['id'] = $key;
            }
            if(Order::RETURN_CASH == $key || Order::PROFIT ==$key || $key == 0)
            {
                $data['withdrawal'][$i]['type'] = $val;
                $data['withdrawal'][$i]['id'] = $key;
            }
            if($key == 0 || (Order::RETURN_CASH != $key && Order::PROFIT!= $key) ){
                $data['profit'][$k]['type'] = $val;
                $data['profit'][$k]['id'] = $key;
                $k++;
            }
            $i++;
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => '',
            'data' => $data
        ];
    }


    public function actionList()
    {
//        1返现提现 2分润提现
        $type = $this->request->post('type');
        $page = $this->request->post('page', 1);
        $limit = $this->request->post('limit', 10);
        $entry = $this->request->post('entry');
        if ($page <= 1) {
            $page = 1;
        }
        $model = Order::find();
        $model->andWhere([
            'user_id' => Yii::$app->user->id,
        ]);

        if ($this->request->post('created_at_start')) {
            $model->andFilterWhere([
                '>=',
                'created_at',
                strtotime($this->request->post('created_at_start') . ' 00:00:00')
            ]);
        }
        if ($this->request->post('created_at_end')) {
            $model->andFilterWhere([
                '<=',
                'created_at',
                strtotime($this->request->post('created_at_end') . ' 23:59:59')
            ]);
        }

        $model->andFilterWhere(['entry'=>$entry]);
        $model->andFilterWhere(['type' => $type]);
        $model->orderBy(['created_at'=>SORT_DESC]);

        $offset = ($page - 1) * $limit;
        $model->offset($offset)->limit($limit);
        $data = $model->all();

        if(empty($data)){
            return [
                'status' => 0,
                'code' => 0,
                'message' => '没有数据',
                'data' => ''
            ];
        }

        $datas = [];
        foreach ($data as $key => $val) {
            $datas[$key] = $val->toArray();
            $datas[$key]['type_text'] = $val->getType();
            $datas[$key]['entry_text'] = $val->getEntry();
            $amount = Order::formatProfit($val['amount']);
            if (in_array($val->type, [
                Order::RETURN_CASH,
                Order::PROFIT,
                Order::FROZEN_REWARDS,
            ])) {
                $datas[$key]['amount'] = '-' . $amount;
                $datas[$key]['status_text'] = Order::FROZEN_REWARDS == $val->type ? '' : $val->getStatus();
            } else {
                $datas[$key]['amount'] = $amount <= 0 ? $amount : '+' . $amount;
                $datas[$key]['status_text'] = '';
            }
            $datas[$key]['created_at'] = date('Y-m-d H:i:s', $val->created_at);
        }
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $datas
        ];
    }

    /**
     * *
     *
     * @param
     *            $type
     * @return string 收益提现统计
     */
    public function actionStatistics()
    {
        //        1返现提现 2分润提现 3分润收益 4返现收益
        $type = $this->request->post('type');
        $entry = $this->request->post('entry');
        $withdrawOrder = Order::find()->andWhere([
            'user_id' => Yii::$app->user->identity->id,
            'status' => Order::SUCCESS
        ]);
        if(!empty($type)){
            if(in_array($type,[Order::RETURN_CASH,Order::PROFIT])){
                $withdrawOrder->andWhere(['type'=>$type]);
            }else{
                $withdrawOrder->andWhere(['type'=>'']);
            }
        }else{
            $withdrawOrder->andWhere([
                'in',
                'type',
                [
                    Order::RETURN_CASH,
                    Order::PROFIT
                ]
            ]);
        }

        if ($this->request->post('created_at_start')) {
            $withdrawOrder->andFilterWhere([
                '>=',
                'created_at',
                strtotime($this->request->post('created_at_start') . ' 00:00:00')
            ]);
        }
        if ($this->request->post('created_at_end')) {
            $withdrawOrder->andFilterWhere([
                '<=',
                'created_at',
                strtotime($this->request->post('created_at_end') . ' 23:59:59')
            ]);
        }
        $withdrawOrder->andFilterWhere(['entry'=>$entry]);
        $data['withdraw'] = $withdrawOrder->sum('amount');

//        收益统计
        $benefitOrder = Order::find()->andWhere([
            'user_id' => Yii::$app->user->identity->id,
            'entry' => Profit::ENTRY
        ]);

        if(!empty($type)) {
            if (! in_array($type, [Order::RETURN_CASH,Order::PROFIT])) {
                $benefitOrder->andWhere(['type' => $type]);
            } else {
                $benefitOrder->andWhere(['type' => '']);
            }
        }else{
            $benefitOrder->andWhere([
                '>',
                'type',
                Order::PROFIT
            ]);
        }

        if ($this->request->post('created_at_start')) {
            $benefitOrder->andFilterWhere([
                '>=',
                'created_at',
                strtotime($this->request->post('created_at_start') . ' 00:00:00')
            ]);
        }
        if ($this->request->post('created_at_end')) {
            $benefitOrder->andFilterWhere([
                '<=',
                'created_at',
                strtotime($this->request->post('created_at_end') . ' 23:59:59')
            ]);
        }

        $data['benefit'] = $benefitOrder->sum('amount');
        if($entry == Order::NO)
        {
            $data['benefit'] = 0 ;
        }
        $data['withdraw'] = ! empty($data['withdraw']) ? Order::formatProfit($data['withdraw']) : 0;
        $data['benefit'] = ! empty($data['benefit']) ? Order::formatProfit($data['benefit']) : 0;
        
        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    收益统计图数据
    public function actionProfitStatistics()
    {
//        date_type=1最近七天 2最近半年     type 收益类型
        $date_type = $this->request->post('date_type');
        $type = $this->request->post('type');

        if(Order::WEEK == $date_type)
        {
            $created_end = strtotime(date('Y-m-d 23:59:59'));
            $created_start = strtotime(date('Y-m-d',strtotime("-6 days")));
            $unix_time = '%m-%d';
        }else{
            $created_end = strtotime(date('Y-m-t 23:59:59'));
            $created_start = date('Y-m-d H:i:s',strtotime("-5 months",strtotime(date('Y-m-01 00:00:00'))));
            $unix_time = '%m';
        }

//        获取最近七天或半年日期
        $date = Order::getDate($date_type);


        $order = Order::find();
        $order->select(['total_money'=>'sum(amount)','count'=>'count(*)','created_time'=>'FROM_UNIXTIME(created_at,"' . $unix_time . '")']);
        $order->andWhere([
            'agent_id'=>Yii::$app->user->identity->agent_id,
            'user_id' => Yii::$app->user->id,
            'entry' => Order::YES
        ]);
        $order->andWhere([
           'not in',
           'type',
           [
               Order::RETURN_CASH,
               Order::PROFIT
           ]
        ]);
        $order->andFilterWhere([
            'type' => $type
        ]);
        $order->andWhere([
            'between',
            'created_at',
            $created_start,
            $created_end
        ]);
        $order->groupBy('created_time');
        $data = $order->asArray()->all();
//        $data = $order->createCommand()->getRawSql();
//        var_dump($data);die;

//        exist_date 数据库已存在的日期数据
        $date_exist = [];
        foreach($data as $key => $val)
        {
            $data[$key]['total_money'] = round($val['total_money'],2);
            if(date('m') == $val['created_time'])
            {
                $data[$key]['created_time'] = '本月';
                $date_exist[$key] = '本月';
            }elseif(date('m-d') == $val['created_time'])
            {
                $data[$key]['created_time'] = '今天';
                $date_exist[$key] = '今天';
            }
            else{
                $date_exist[$key] = $val['created_time'];
            }
        }
        $date = array_diff($date,$date_exist);

        $result = [];
        foreach($date as $key=> $val)
        {
            $result[$key]['total_money'] = '0';
            $result[$key]['count'] = '0';
            $result[$key]['created_time'] = $val;
        }
        $data = array_merge($data,$result);
        array_multisort(array_column($data,'created_time'),SORT_DESC,$data);

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }

//    提现统计图
    public function actionWithdrawalStatistics()
    {
        //        date_type=1最近七天 2最近半年     type 收益类型
        $date_type = $this->request->post('date_type');
        $type = $this->request->post('type');

        if(Order::WEEK == $date_type)
        {
            $created_end = strtotime(date('Y-m-d 23:59:59'));
            $created_start = strtotime(date('Y-m-d',strtotime("-6 days")));
            $unix_time = '%m-%d';
        }else{
            $created_end = strtotime(date('Y-m-t 23:59:59'));
            $created_start = date('Y-m-d H:i:s',strtotime("-5 months",strtotime(date('Y-m-01 00:00:00'))));
            $unix_time = '%m';
        }

//        获取最近七天或半年日期
        $date = Order::getDate($date_type);


        $order = Order::find();
        $order->select(['total_money'=>'sum(amount)','count'=>'count(*)','created_time'=>'FROM_UNIXTIME(created_at,"' . $unix_time . '")']);
        $order->andWhere([
            'agent_id'=>Yii::$app->user->identity->agent_id,
            'user_id' => Yii::$app->user->id,
            'status' => Order::SUCCESS
        ]);
        $order->andWhere([
            'in',
            'type',
            [
                Order::RETURN_CASH,
                Order::PROFIT
            ]
        ]);
        $order->andFilterWhere([
            'type' => $type
        ]);
        $order->andWhere([
            'between',
            'created_at',
            $created_start,
            $created_end
        ]);
        $order->groupBy('created_time');
        $data = $order->asArray()->all();
//        $data = $order->createCommand()->getRawSql();
//        var_dump($data);die;

//        exist_date 数据库已存在的日期数据
        $date_exist = [];
        foreach($data as $key => $val)
        {
            if(date('m') == $val['created_time'])
            {
                $data[$key]['created_time'] = '本月';
                $date_exist[$key] = '本月';
            }elseif(date('m-d') == $val['created_time'])
            {
                $data[$key]['created_time'] = '今天';
                $date_exist[$key] = '今天';
            }
            else{
                $date_exist[$key] = $val['created_time'];
            }
        }
        $date = array_diff($date,$date_exist);

        $result = [];
        foreach($date as $key=> $val)
        {
            $result[$key]['total_money'] = '0';
            $result[$key]['count'] = '0';
            $result[$key]['created_time'] = $val;
        }
        $data = array_merge($data,$result);
        array_multisort(array_column($data,'created_time'),SORT_DESC,$data);

        return [
            'status' => 0,
            'code' => 200,
            'message' => [
                ''
            ],
            'data' => $data
        ];
    }
}